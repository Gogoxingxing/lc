Task Scheduler

// a a c b b b n = 2
// b a c b a idel b -> 7//no order, find the minimum way to schedule
public int taskSche(char[] tasks, int n){
    if(tasks == null || tasks.length == 0)
        return 0;
    Map<Character, Integer> map = new HashMap<>();
    int count = 0;
    for(int i = 0; i < tasks.length; i++){
        map.put(tasks[i], map.getOrDefault(tasks[i], 0) + 1);
    }
    //poll max out of the queue
    PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>((a,b) -> a.getValue() != b.getValue() ? b.getValue() - a.getValue() : a.getKey() - b.getKey());
    pq.addAll(map.entrySet());
    while(!pq.isEmpty()){
        int k = n + 1;
        List<Map.Entry> list = new ArrayList<>();
        while(!pq.isEmpty() && k > 0){
            Map.Entry<Character, Integer> top = pq.poll();
            top.setValue(top.getValue()-1);
            list.add(top);
            count++;
        }
        for(Map.Entry<Character, Integer> entry : list){
            if(entry.getValue() > 0)
                pq.offer(entry);
        }
        if(pq.isEmpty())
            break;
        count += k;
    }
    return count;
}

// care about sequence
// thread: 1, 2, 1, 1, 3, 4; 冷却时间: 2 time slot，scheduler应该是这样的：1, 2, _, 1, _, _, 1, 3, 4，最后返回9. 
// use slot to record the number of task that has been execute
// if we found that the same task come out again, and the earliest next execute time is larger than slot
// which means we have to put some idle task between this two same tasks
// update slot (added idle tasks)
public int taskSche (char tasks[], int cooldown){
    Map<Character, Integer> map = new HashMap<>();
    int slot = 0;
    for(char task : tasks){
        if(map.containsKey(task) && map.get(task) > slot){
            slot = map.get(task);
        }
        map.put(task, slot + 1 + cooldown);
        slot++;//update the used 1 slot of curr task
    }
    return slot;
}

//print out the schedule
public String taskSche(char tasks[], int cooldown){
    StringBuilder sb = new StringBuilder();
    Map<Character, Integer> map = new HashMap<>();
    int slot = 0;
    for(char task : tasks){
        if(map.containsKey(task) && map.get(task) > slot){
            int  = map.get(task) - slot;
            while(waittime > 0){
                sb.append('_');
                waittime--;
            }
        }
        map.put(task, slot + 1 + cooldown);
        sb.append(task);
        slot++;
    }
    return sb.toString();
}

// not care about out sequence
// (maxFreq-1): number of minimum time interval
// (cooldown+1): length of each minimum time interval
// 11122 2 --> 12_12_1 --> 2{maxFreq-1} * 3{cooldown+1, 12_, 3 unit is minimum time interval} + numOfMax
// 1112223 3 --> 123_12_ _ 12 如果某个task的频率小于最大的那一个，那么它可以被插到中间隔开相同的task
// but be careful, 
// 1112233 2 --> 1231231 --> 3*2+1 = 7 == 7
// 111234 1 --> 121314
// 1123 1 ---> 1213 at this time we donot need idle task, so the 3 is not count into if we use the formular before
// so we need to compare the result of previous formular with the length of tasks, get the max one as the result.
public int taskSche(char[] tasks, int cooldown){
    int maxFreq = 0, numOfMax = 0;
    Map<Character, Integer> map = new HashMap<>();
    for(char task : tasks){
        map.put(task, map.getOrDefault(task, 0) + 1);
    }
    for(int freq : map.values()){
        if(freq > maxFreq){
            maxFreq = freq;
            numOfMax = 1;
        }else if(freq == maxFreq){
            numOfMax++;
        }
    }
    int minitime = (cooldown+1) * (maxFreq-1) + numOfMax;
    return Math.max(tasks.length, minitime);
}

public int maxHistogram(int[] nums){
    if(nums == null || nums.length == 0)
        return 0;
    Stack<Integer> stack = new Stack<>();
    int max = 0, i = 0, n = nums.length;
    while(i < n){
        while(!stack.isEmpty() && nums[i] < nums[stack.peek()]){
            max = Math.max(max, nums[stack.pop()] * (i - stack.isEmpty() ? 0 : stack.peek() + 1));
        }
        stack.push(i++);
    }
    while(!stack.isEmpty()){
        max = Math.max(max, nums[stack.pop()] * (i - stack.isEmpty() ? 0 : stack.peek() + 1));
    }
    return max;
}

//level traversal
//BFS
public List<List<Integer>> levelOrder(TreeNode root){
    List<List<Integer>> res = new ArrayList<>();
    if(root == null)
        return res;
    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);
    while(!queue.isEmpty()){
        List<Integer> tmp = new ArrayList<>();
        int size = queue.size();
        for(int i = 0; i < size; i++){
            TreeNode node = queue.poll();
            tmp.add(node.val);
            if(node.left != null)
                queue.offer(node.left);
            if(node.right != null)
                queue.offer(node.right);
        }
        res.add(tmp);
    }
    return res;
}

//DFS
public List<List<Integer>> levelOrder(TreeNode root){
    List<List<Integer>> res = new ArrayList<>();
    if(root == null)
        return res;
    dfs(root, res, 0);
    return res;
}
public void dfs(TreeNode node, List<List<Integer>> res, int level){
    if(node == null)
        return;
    if(res.size() == level)
        res.add(new ArrayList<>());
    res.get(level).add(root.val);
    dfs(res, root.left, level + 1);
    dfs(res, root.right, level + 1);
}
